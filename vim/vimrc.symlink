runtime! debian.vim

" ---------------------------------------------------------------
" --                      Basic options                        --
" ---------------------------------------------------------------
if has("autocmd")
  filetype plugin indent on
endif

set background=dark
syntax on

set relativenumber
set number
set hidden

set tabstop=4     " Number of spaces in a tab
set softtabstop=4 " Allows to delete a tab represented w/ spaces
set shiftwidth=4
set expandtab     " Insert spaces instead of a tab"

set showcmd
set ignorecase
set mouse=
set autoindent
set smartindent
set incsearch    " Incremental search: autocomplete search with Ctrl+L
set hlsearch     " Highlight search terms

let mapleader=','

" Activates filetype specific plugins
filetype on
filetype plugin on

" Display and toggle display of invisible characters
set list
nmap <leader>l :set list!<CR>
set listchars=trail:~,extends:>,precedes:<,tab:▸\ 

" To use the :grep function
set grepprg=grep\ -nH\ $*

" Word autocompletion
" Shortcut is ^X^K in insert mode
set dictionary-=/usr/share/dict/words dictionary+=/usr/share/dict/words

if !has("nvim")
    set cm=blowfish
endif

" To avoid error when using fish
set shell=/bin/bash

" Use SQL syntax coloring for Hive scripts
au BufNewFile,BufRead *.hive set filetype=sql

" Activate undo after reopening a file
set undofile
set undodir=~/.vim/undodir


" ---------------------------------------------------------------
" --                        Plugins                            --
" ---------------------------------------------------------------

call plug#begin('~/.vim/plugged')

" Text editing
Plug 'tpope/vim-surround'                              " Easier text surrounding
Plug 'tpope/vim-commentary'                            " Easier commenting
Plug 'ervandew/supertab'                               " Better completion
Plug 'wellle/targets.vim'                              " More ways to select text
Plug 'tpope/vim-repeat'
Plug 'dhruvasagar/vim-table-mode', { 'for': ['votl','rst','markdown','text'] }

" Notes
Plug 'insanum/votl'                                    " Outliner
Plug 'vimwiki/vimwiki', {'branch': 'dev'}              " Use vim as a wiki

" Terminal & Display
Plug 'itchyny/lightline.vim'                           " Statusline
Plug 'edkolev/tmuxline.vim'                            " Tmux statusline generator
Plug 'tpope/vim-dispatch'                              " Async runner

" Coding tools
Plug 'scrooloose/syntastic'                            " Syntax checking
Plug 'tpope/vim-fugitive'                              " Git stuff
Plug 'iberianpig/tig-explorer.vim'                     " Use tig without getting out of vim
Plug 'airblade/vim-gitgutter'                          " Show changes in buffers
Plug 'airblade/vim-rooter'                             " Change cwd
Plug 'janko-m/vim-test'                                " Easier test runs
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " Fuzzy finder
Plug 'junegunn/fzf.vim'                                " Everything <3
Plug 'majutsushi/tagbar'                               " Show current location in the code in the status bar
Plug 'fvictorio/vim-extract-variable'                  " Shortcut to extract variables

" Python
Plug 'davidhalter/jedi-vim'                            " Python Autocompletion
if has("nvim")
    Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'} " Python contextual syntax coloring
endif
Plug 'szymonmaszke/vimpyter'                           " Mostly to visualize ipynb files in vim and not to run anything

" Files
Plug 'will133/vim-dirdiff'                             " Vimdiff whole directories
Plug 'danro/rename.vim'                                " Rename current buffer

" Languages
Plug 'rust-lang/rust.vim'
Plug 'leafgarland/typescript-vim'

" Color themes
Plug 'morhetz/gruvbox'
Plug 'sickill/vim-monokai'
Plug 'altercation/vim-colors-solarized'
Plug 'michalbachowski/vim-wombat256mod'
Plug 'itchyny/landscape.vim'

" Misc
Plug 'onur/vim-motivate'                               " Displays a random quote

" Add plugins to &runtimepath
call plug#end()

" ---------------------------------------------------------------
" --               Colorschemes and appearance                 --
" ---------------------------------------------------------------

" Use 256 color palette
set t_Co=256

set guifont=Inconsolata\ 10

if has('gui_running')
    colorscheme gruvbox
else
    colorscheme gruvbox
endif
" Other colorschemes I like:
" inkpot
" ir_black
" BusyBee
" 256-grayvim
" wombat256mod
" darkblue
" darktango
" torte
" twilight256

" Demo mode with a light background for demos
function! Demo()
    set background=light
    colorscheme moria
endfunction

" Make vimdiff prettier by keeping syntax coloring
highlight DiffAdd    cterm=NONE ctermfg=NONE ctermbg=22
highlight DiffDelete cterm=NONE ctermfg=NONE ctermbg=52
highlight DiffChange cterm=NONE ctermfg=NONE ctermbg=23
highlight DiffText   cterm=NONE ctermfg=NONE ctermbg=23

" ---------------------------------------------------------------
" --                 Lightline configuration                   --
" ---------------------------------------------------------------

" Lightline
set laststatus=2
let g:lightline = {
    \ 'colorscheme': 'powerline',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'filename' ], [ 'tagbar' ] ]
    \ },
    \ 'component': {
    \   'tagbar': '%{tagbar#currenttag("%s", "", "f")}'
    \ },
    \ 'component_function': {
    \   'fugitive': 'LightlineFugitive',
    \   'modified': 'LightlineModified',
    \   'filename': 'LightlineFilename'
    \  },
    \ 'separator': { 'left': '', 'right': '' },
    \ 'subseparator': { 'left': '', 'right': '' }
    \ }

let g:tagbar_status_func = 'TagbarStatusFunc'
function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

function! LightlineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightlineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return " "
  else
    return ""
  endif
endfunction

function! LightlineFugitive()
  return exists('*fugitive#head') && strlen(fugitive#head()) ? ' '.fugitive#head() : ' '
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
       \ ('' != expand('%%:t') ? expand('%%:t') : '[No Name]') .
       \ ('' != LightlineModified() ? ' ' . LightlineModified() : '') .
       \ ('')
endfunction

" ---------------------------------------------------------------
" --                 Plugins configuration                     --
" ---------------------------------------------------------------

" vimwiki configuration
let g:vimwiki_list = [{'path': '~/vimwiki/',
                   \ 'syntax': 'markdown', 'ext': '.md', 'links_space_char': '_'}]
let g:vimwiki_markdown_link_ext = 1

" vim-test configuration
let test#strategy = "dispatch"
let test#python#runner = 'nose'

" Netrw configuration
let g:netrw_banner=0
let g:netrw_browse_split=4
let g:netrw_altv=1
let g:netrw_liststyle=3
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" Syntastic
let g:syntastic_python_python_exec = 'python3'
let g:syntastic_python_checkers = ['python']


" ---------------------------------------------------------------
" --                       Shortcuts                           --
" ---------------------------------------------------------------

nmap <C-O> <C-w><C-w>

" Adds closing bracket
inoremap {<CR>  {<CR>}<Esc>O

" Remove tabs
command! Rmtabs :%s!\t!\ \ \ \ !g<CR>

" Display column for 80char width
"set colorcolumn=80

" Edit the vimrc file
command! Vimrc :vsplit $MYVIMRC

" Use space to insert : in normal mode
noremap <space> :

" easier tab browsing with a single keystroke instead of gtgtgt
nnoremap <M-t> :tabp<CR>
nnoremap <M-n> :tabn<CR>

" Properly paste stuff
map <F4> :set paste! <CR>

" Misc
nnoremap <F5> :tabe ~/Documents/todo.votl<CR>
map <F6> :! pdflatex %u <CR>
nmap <F8> :TagbarToggle<CR>

" Move blocks (https://www.reddit.com/r/vim/comments/93mfr0/anyone_using_dragvisualsvim_by_damian_conway/)
vnoremap <S-Right>  xpgvlolo
vnoremap <S-left>   xhPgvhoho
vnoremap <S-Down>   xjPgvjojo
vnoremap <S-Up>     xkPgvkoko

" Only mappings used from unimpaired.vim
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
nnoremap [B :bfirst<CR>
nnoremap ]B :blast<CR>
nnoremap [q :cprevious<CR>
nnoremap ]q :cnext<CR>
nnoremap [Q :cfirst<CR>
nnoremap ]Q :clast<CR>
nnoremap [<C-Q> :cpfile<CR>
nnoremap ]<C-Q> :cnfile<CR>

" ---------------------------------------------------------------
" --                Shortcuts (<leader> & fzf)                 --
" ---------------------------------------------------------------

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-rg)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" <leader>. : save
nmap <silent> <leader>. :w<CR>

" <leader>e : Open files relative to current directory
cnoremap %% <C-R>=expand('%:h').'/'<CR>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" <leader>m move splits
nnoremap <leader>mr 20<C-w><
nnoremap <leader>ml 20<C-w>>

" <leader>j : prettify json
vnoremap <leader>j :! python -m json.tool<CR>
nnoremap <leader>j :%! python -m json.tool<CR>

" <leader>t : unit tests
nmap <silent> <leader>t :TestNearest --nocapture<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>tt :TestLast --nocapture --nologcapture<CR>

" <leader>b : debug
nnoremap <silent> <leader>b Oimport nose.tools as nt; nt.set_trace()<Esc>
nnoremap <silent> <leader>bc :%s/\(^[\t ]*\)\([^#]*set_trace.*\)/\1# \2/g<CR>
nnoremap <silent> <leader>bd :g/set_trace/d<CR>

" <leader>f : files
nmap <silent> <leader>f :Rg<CR>
vnoremap <leader>f y:Rg<Space><C-R>"<CR>
nmap <silent> <leader>F :Files<CR>
nnoremap <C-p> :Files<CR>

" <leader>v : buffers
nmap <silent> <leader>v :Buffers<CR>

" <leader>g : git
nmap <silent> <leader>gs :TigStatus<CR>
nmap <silent> <leader>gS :Gstatus<CR>
nmap <silent> <leader>gb :Gblame<CR>
nmap <silent> <leader>gf :Gfetch<CR>
nmap <silent> <leader>gh :TigOpenCurrentFile<CR>
nmap <silent> <leader>gl :TigOpenProjectRootDir<CR>
nmap <silent> <leader>gL :Commits<CR>
nmap <leader>gk :Git checkout
nmap <leader>gw :Gwrite<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gp :Gpush<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gD :Gdiff 

nmap <leader>{ :GitGutterPrevHunk<CR>
nmap <leader>} :GitGutterNextHunk<CR>

" <leader>d : diffs
nmap <leader>dp :diffput<CR>
nmap <leader>dg :diffget<CR>

" <leader>c work stuff
" nnoremap <leader>c

" <leader>x : quickly execute some command
"nmap <silent> <leader>x :Dispatch <your_command>

" ---------------------------------------------------------------
" --                   Import local files                      --
" ---------------------------------------------------------------

source $HOME/.local.vimrc

" ---------------------------------------------------------------
" --                        WIP                                --
" ---------------------------------------------------------------
function! s:changebranch(branch) 
    execute 'Git checkout' . a:branch
    call feedkeys("i")
endfunction

command! -bang Gbranch call fzf#run({
            \ 'source': 'git branch -a --no-color | grep -v "^\* " ', 
            \ 'sink': function('s:changebranch')
            \ })

