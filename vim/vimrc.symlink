" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

runtime! debian.vim

syntax on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

if has("autocmd")
  filetype plugin indent on
endif

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif


" ---------------------------------------------------------------
" --                      Basic options                        --
" ---------------------------------------------------------------

set relativenumber
"or set number

set tabstop=4     " Number of spaces in a tab
set softtabstop=4 " Allows to delete a tab represented w/ spaces
set shiftwidth=4
set expandtab     " Insert spaces instead of a tab"

set showcmd
set ignorecase
set mouse=a
set autoindent
set smartindent
set incsearch    " Incremental search: autocomplete search with Ctrl+L

" ---------------------------------------------------------------
" --               Colorschemes and appearance                 --
" ---------------------------------------------------------------

" Use 256 color palette
set t_Co=256

"set guifont=Inconsolata\ 10
set guifont=Monospace\ 8

if has('gui_running')
    colorscheme wombat256mod
else
    colorscheme wombat256mod
endif
" Other colorschemes I like:
" inkpot
" ir_black
" BusyBee
" 256-grayvim
" wombat256mod
" darkblue
" darktango
" torte
" twilight256

" Highlight search terms
set hlsearch

map <F3> :NERDTreeToggle<CR>

let mapleader=','

" Activates filetype specific plugins
filetype on
filetype plugin on

" Display and toggle display of invisible characters
set list
nmap <leader>l :set list!<CR>
set listchars=trail:~,extends:>,precedes:<,tab:▸\ 

" Adds closing bracket
inoremap {<CR>  {<CR>}<Esc>O

" Remove tabs
command Rmtabs :%s!\t!\ \ \ \ !g<CR>

" Open file relative to current directory
cnoremap %% <C-R>=expand('%:h').'/'<CR>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

cnoremap %u <C-R>=expand('%:t')<CR>
map <F6> :! pdflatex %u <CR>

map <F4> :set paste! <CR>

" Easier browsing through tabs
nnoremap <leader>a gT
nnoremap <leader>z gt

" Display column for 80char width
"set colorcolumn=80

" --------------------------------------------------------------
" --                  Learn vim the hard way                  --
" --------------------------------------------------------------

" Edit the vimrc file
command Vimrc :vsplit $MYVIMRC

" Use space to put current line at the center of the screen
nnoremap <Space> zz

" Minimize hand movement
inoremap kj <Esc>

" --------------------------------------------------------------
" --                         Plugins                          --
" --------------------------------------------------------------

" Pathogen
execute pathogen#infect()

" Lightline
set laststatus=2
let g:lightline = {
    \ 'colorscheme': 'powerline',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'filename' ] ]
    \ },
    \ 'component_function': {
    \   'fugitive': 'LightlineFugitive',
    \   'modified': 'LightlineModified',
    \   'filename': 'LightlineFilename'
    \  },
    \ 'separator': { 'left': '⮀', 'right': '⮂' },
    \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
    \ }

function! LightlineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightlineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "⭤"
  else
    return ""
  endif
endfunction

function! LightlineFugitive()
  return exists('*fugitive#head') && strlen(fugitive#head()) ? '⭠ '.fugitive#head() : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction


nnoremap <leader>p :CtrlP<CR>

" To use the :grep function
set grepprg=grep\ -nH\ $*

" Word autocompletion
" Shortcut is ^X^K in insert mode
set dictionary-=/usr/share/dict/words dictionary+=/usr/share/dict/words

nnoremap <leader>mr 20<C-w><
nnoremap <leader>ml 20<C-w>>

nnoremap <F5> :tabe ~/Documents/todo.votl<CR>

set cm=blowfish

" To avoid error when using fish
set shell=/bin/bash

" Disable abusive folding for rst files (riv.vim)
au FileType rst set nofoldenable
let g:riv_fold_level = 0
let g:riv_fold_auto_update = 0
let rst_syntax_folding = 0
let g:riv_auto_fold_force = 0

" Use SQL syntax coloring for Hive scripts
au BufNewFile,BufRead *.hive set filetype=sql
